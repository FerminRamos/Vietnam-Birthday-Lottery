---
title: "Vietnam Birthday Lottery Analysis"
author: "Fermin Ramos"
date: 04-24-2025
description: |
  [GitHub Repository](https://github.com/FerminRamos/Vietnam-Birthday-Lottery/tree/main), This repository analyses the likelihood of someone being selected for the Vietnam Draft based on their birthday.
params:
  root_folder: "/Users/speak_easy/R-Studio/Vietnam Birthday Lottery/Datasets/CSV/"
format:
  html:
    theme:                  litera
    highlight-style:        atom-one
    page-layout:            full      # article, full   # https://quarto.org/docs/output-formats/page-layout.html
    toc:                    true
    toc-location:           body  # body, left, right
    number-sections:        false
    self-contained:         false     # !!! this can cause a render error
    code-overflow:          scroll    # scroll, wrap
    code-block-bg:          true
    code-block-border-left: "#30B0E0"
    code-copy:              false     # true, false, hover a copy buttom in top-right of code block
---
### Read datasets
```{r message=FALSE, warning=FALSE, echo=TRUE}
# Read datasets
library(readr)

lottery1970 <- read_csv(paste0(params$root_folder, "1970-Vietnam-Lottery.csv"))
lottery1971 <- read_csv(paste0(params$root_folder, "1971-Vietnam-Lottery.csv"))
lottery1972 <- read_csv(paste0(params$root_folder, "1972-Vietnam-Lottery.csv"))
lottery1973 <- read_csv(paste0(params$root_folder, "1973-Vietnam-Lottery.csv"))
```



### For each date, check if draft was conducted

* NOTE ~ For table 1973, Dec. 19th & Feb. 4th both have APN 168. This is a mistake made by the U.S. Selective Service. One of these values should be 068, not 168. *Why this matters?* In 1973, they drafted APN numbers 0-95. Therefore, men born in one of these dates *were* drafted and thus affect the probabilities of being picked based on your birthday. For the purpose of this analysis, we'll treat the dataset "as-is". 

```{r message=FALSE, warning=FALSE, echo=TRUE}
library(dplyr)
library(tidyr)

# Convert all columns *except Day* to char data type to avoid errors
cols_to_char <- function(myTibble){
  return(myTibble %>% mutate(across(-Day, as.character)))
}

lottery1970 <- cols_to_char(lottery1970)
lottery1971 <- cols_to_char(lottery1971)
lottery1972 <- cols_to_char(lottery1972)
lottery1973 <- cols_to_char(lottery1973)


# Reformat data as:
#  day, month, year, apn, drafted (y/n)
wasDrafted <- function(apn, highestAPN){
  if(as.integer(apn) <= highestAPN){
    return("Y")
  }
  return("N")
}

restructure_data <- function(myTibble, highestCalledAPN){
  data <- myTibble %>%
                     pivot_longer(
                       cols = -Day, # "Day" stays as-is; rest are month columns
                       names_to = "month",
                       values_to = "apn"
                     ) %>%
                     filter(apn != "----", !is.na(apn)) %>%
                     mutate(
                       year = "1970",
                       drafted = sapply(apn, 
                                        wasDrafted, 
                                        highestAPN = highestCalledAPN)
                      ) %>%
                      select(day=Day, month, year, apn, drafted)
  return(data)
}

lottery1970_draft <- restructure_data(myTibble=lottery1970, 
                                      highestCalledAPN=195)
lottery1971_draft <- restructure_data(myTibble=lottery1971, 
                                      highestCalledAPN=125)
lottery1972_draft <- restructure_data(myTibble=lottery1972, 
                                      highestCalledAPN=95)
lottery1973_draft <- restructure_data(myTibble=lottery1973, 
                                      highestCalledAPN=95)

draft_list <- list(l1 = lottery1970_draft,
                   l2 = lottery1971_draft,
                   l3 = lottery1972_draft,
                   l4 = lottery1973_draft)
```


### Write new datasets (optional)
```{r message=FALSE, warning=FALSE, echo=TRUE, eval=FALSE}
# Write new datasets to CSV
write_csv(lottery1970_draft,
          paste0(params$root_folder, 
                 "Include Draft Status/", 
                 "1970-Vietnam-Lottery.csv"))
write_csv(lottery1971_draft,
          paste0(params$root_folder, 
                 "Include Draft Status/", 
                 "1971-Vietnam-Lottery.csv"))
write_csv(lottery1972_draft,
          paste0(params$root_folder, 
                 "Include Draft Status/", 
                 "1972-Vietnam-Lottery.csv"))
write_csv(lottery1973_draft,
          paste0(params$root_folder, 
                 "Include Draft Status/", 
                 "1973-Vietnam-Lottery.csv"))
```


# Understanding The Data
A "hit" is when a date has "drafted" as "Y". Every day is randomly marked with a number 1-365. If a draft is needed, the government would select the date with the number 1, then the date with the number 2, and so on. Not all dates were selected for the draft. The highest number called each year is the APN. These are the highest APN's called for each year:

* Table 1970 = 195

* Table 1971 = 125

* Table 1972 = 95

* Table 1973 = 95

Let's re-organize the data into yearly categories with counts of hits/misses per month.
```{r message=FALSE, warning=FALSE, echo=FALSE, eval=TRUE}
library(purrr)
library(tibble)
library(dplyr)

total_days <- sum(map_int(draft_list, nrow))

# Monthly Totals
getMonthlyStats <- function(my_tibble, my_month){
  ratio <- list(hit = my_tibble %>% 
                      filter(drafted == "Y" & month == my_month) %>% 
                      nrow(),
                miss = my_tibble %>% 
                       filter(drafted == "N" & month == my_month) %>% 
                       nrow())
  return(ratio)
}

months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", 
            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")

monthlyStats <- map(months, 
                function(m) map(draft_list, ~ getMonthlyStats(.x, m)))
names(monthlyStats) <- months  # Rename outer-list to month names

# Transpose to a more natural data hierarchy: monthlyStats$l1$Jan$hit
monthlyStats <- transpose(monthlyStats)
names(monthlyStats) <- names(draft_list)

# Flatten nested structure into an organized data frame
monthlyStats_df <- map2_dfr(monthlyStats, 
                       names(monthlyStats), 
                       function(dataset, dataset_name) {
                          map2_dfr(dataset, 
                                   names(dataset), 
                                   function(stat, month_name) {
                                       tibble(
                                         dataset = recode(dataset_name,
                                                          l1 = "Lottery 1970",
                                                          l2 = "Lottery 1971",
                                                          l3 = "Lottery 1972",
                                                          l4 = "Lottery 1973"),
                                         month = month_name,
                                         hit = stat$hit,
                                         miss = stat$miss
    )
  })
})


# Add hit ratio column to data frame
monthlyStats_df <- monthlyStats_df %>%
  mutate(hit_ratio = hit / (hit + miss))


monthlyStats_df
```

### (plot) Hit/Miss Complete
```{r message=FALSE, warning=FALSE, echo=TRUE, eval=TRUE}
library(ggplot2)

# Grid Layout
monthlyStats_df %>%
  mutate(month = factor(month, levels = months)) %>%  # Set calendar order
  pivot_longer(cols = c(hit, miss), 
               names_to = "type", 
               values_to = "count") %>%
  ggplot(aes(x = month, 
             y = count, 
             fill = type)) +
  geom_col(position = "dodge") +
  facet_wrap(~ dataset) +
  labs(title = "Hits and Misses per Month by Dataset", 
       x = "Month", y = "Count") +
  theme_minimal()

```

### (plot) Ratio Complete
```{r message=FALSE, warning=FALSE, echo=TRUE, eval=TRUE}
library(ggplot2)

# Grid Layout
monthlyStats_df %>%
  mutate(month = factor(month, levels = months)) %>%  # Set calendar order
  ggplot(aes(x = month, 
             y = hit_ratio, 
             fill = month)) +
  geom_col(position = "dodge") +
  facet_wrap(~ dataset) +
  labs(title = "Hits and Misses Ratio per Month by Dataset", 
       x = "Month", y = "Ratio") +
  theme_minimal()

```


## Recompile data to be split into Months instead of years.
This will let us figure out what month is best to have been born in.
```{r message=FALSE, warning=FALSE, echo=FALSE, eval=TRUE}
library(ggplot2)

# Summarize across datasets
monthlyStats_Summary <- monthlyStats_df %>%
  group_by(month) %>%
  summarise(
    hit = sum(hit),
    miss = sum(miss),
    .groups = "drop"
  ) %>%
  mutate(month = factor(month, levels = months))

# Add hit ratio column to data frame
monthlyStats_Summary <- monthlyStats_Summary %>%
  mutate(hit_ratio = hit / (hit + miss))

monthlyStats_Summary

```

### (plot) Hit/Miss Per Month
```{r message=FALSE, warning=FALSE, echo=TRUE, eval=TRUE}
# Plot
monthlyStats_Summary %>% 
  pivot_longer(cols = c(hit, miss), names_to = "type", values_to = "count") %>% 
  ggplot(aes(x = month, y = count, fill = type)) + 
  geom_col(position = "dodge") +
  labs(title = "Total Hits and Misses per Month",
       x = "Month", y = "Count") +
  theme_minimal()

```


### (plot) Hit/Miss Ratio Per Month
```{r message=FALSE, warning=FALSE, echo=TRUE, eval=TRUE}
library(ggplot2)

# Plot
ggplot(monthlyStats_Summary, aes(x = month, y = hit_ratio, fill = month)) + 
  geom_col(position = "dodge") +
  labs(
    title = "Monthly Draft Hit Ratios by Dataset",
    x = "Month",
    y = "Hit Ratio"
  ) + 
  theme_minimal()

```


# What month was best to have been born?
### Do months with more days lead to higher chances that someone else gets picked?
Let's investigate this common belief...

*Below is a visual comparing a month with 30 days (small month) vs. a month with 31 days (big month) over the course of 4 years.*
```{r message=FALSE, warning=FALSE, echo=FALSE, eval=TRUE}
library(ggplot2)

#
# Iteration 1
#

# Create a data frame with boxes with format:
#  1 4 7 
#  2 5 8
#  3 6 9
boxes <- data.frame(
  x = rep(1:14, each = 5)[1:70],  # Num of columns, each per column.
  y = rep(5:1, times = 14)[1:70],  # Num of rows, times per column.
  group = "Small Month"  # Give boxes a group name
)

# Mark specific boxes as "highlighted" or "empty"
highlight_days <- 36:70
boxes$group[highlight_days] <- "Big Month"

highlight_days <- c(15, 20, 25, 30, 35,
                    55, 60, 65, 70)
boxes$group[highlight_days] <- "Empty"

# Plot with group-based fill
ggplot(boxes, aes(x = x, y = y, fill = group)) +
  geom_tile(color = "black") +
  scale_fill_manual(values = c("Small Month" = "lightblue", 
                               "Big Month" = "lightgreen",
                               "Empty" = "white")) +
  scale_x_continuous(breaks = NULL) +
  scale_y_continuous(breaks = NULL) +
  coord_fixed() +
  theme_void()

```
```{r message=FALSE, warning=FALSE, echo=FALSE, eval=TRUE}
#
# Iteration 2
#

# Create a data frame with boxes
boxes <- data.frame(
  x = rep(1:14, each = 10)[1:140],  # Num of columns, each per column.
  y = rep(10:1, times = 14)[1:140],  # Num of rows, times per column.
  group = "Small Month"  # Give boxes a group name
)

# Mark specific boxes as "highlighted" or "empty"
highlight_days <- 71:140
boxes$group[highlight_days] <- "Big Month"

highlight_days <- c(10, 20, 30, 40, 50, 60, 70,
                    49, 59, 69,
                    80, 90, 100, 110, 120, 130, 140,
                    139)
boxes$group[highlight_days] <- "Empty"

# Plot with group-based fill
ggplot(boxes, aes(x = x, y = y, fill = group)) +
  geom_tile(color = "black") +
  scale_fill_manual(values = c("Small Month" = "lightblue", 
                               "Big Month" = "lightgreen",
                               "Empty" = "white")) +
  scale_x_continuous(breaks = NULL) +
  scale_y_continuous(breaks = NULL) +
  coord_fixed() +
  theme_void()

```
```{r message=FALSE, warning=FALSE, echo=FALSE, eval=TRUE}
#
# Iteration 3
#

# Create a data frame with boxes
boxes <- data.frame(
  x = rep(1:14, each = 15)[1:210],  # Num of columns, each per column.
  y = rep(15:1, times = 14)[1:210],  # Num of rows, times per column.
  group = "Small Month"  # Give boxes a group name
)

# Mark specific boxes as "highlighted" or "empty"
highlight_days <- 106:210
boxes$group[highlight_days] <- "Big Month"

highlight_days <- c(103,
                    14, 29, 44, 59, 74, 89, 104,
                    15, 30, 45, 60, 75, 90, 105,
                    149, 164, 179, 194, 209,
                    120, 135, 150, 165, 180, 195, 210)
boxes$group[highlight_days] <- "Empty"

# Plot with group-based fill
ggplot(boxes, aes(x = x, y = y, fill = group)) +
  geom_tile(color = "black") +
  scale_fill_manual(values = c("Small Month" = "lightblue", 
                               "Big Month" = "lightgreen",
                               "Empty" = "white")) +
  scale_x_continuous(breaks = NULL) +
  scale_y_continuous(breaks = NULL) +
  coord_fixed() +
  theme_void()

```
```{r message=FALSE, warning=FALSE, echo=FALSE, eval=TRUE}
#
# Iteration 4
#

# Create a data frame with boxes
boxes <- data.frame(
  x = rep(1:14, each = 20)[1:280],  # Num of columns, each per column.
  y = rep(20:1, times = 14)[1:280],  # Num of rows, times per column.
  group = "Small Month"  # Give boxes a group name
)

# Mark specific boxes as "highlighted" or "empty"
highlight_days <- 141:280
boxes$group[highlight_days] <- "Big Month"

highlight_days <- c(38, 58, 78, 98, 118, 138,
                    19, 39, 59, 79, 99, 119, 139,
                    20, 40, 60, 80, 100, 120, 140,
                    258, 278,
                    159, 179, 199, 219, 239, 259, 279,
                    160, 180, 200, 220, 240, 260, 280)
boxes$group[highlight_days] <- "Empty"

# Plot with group-based fill
ggplot(boxes, aes(x = x, y = y, fill = group)) +
  geom_tile(color = "black") +
  scale_fill_manual(values = c("Small Month" = "lightblue", 
                               "Big Month" = "lightgreen",
                               "Empty" = "white")) +
  scale_x_continuous(breaks = NULL) +
  scale_y_continuous(breaks = NULL) +
  coord_fixed() +
  theme_void()

```

By the 4th year, a month with more days (big month) accumulated more days. This small change accounts for a slight edge over the smaller months, reducing the probability of being selected from ``r round((1/120)*100, 3)``% to ``r round((1/124)*100, 3)``%

*But is this `< 1`% discrepancy enough of an edge to say that larger months are best to have been born?...*

No! See next section...


### December (one of the biggest months) is the worst month to have been born.
```{r message=FALSE, warning=FALSE, echo=FALSE, eval=TRUE}
library(ggplot2)
library(forcats)

# Reorganize months based on hit-ratio column
monthlyStats_Summary <- monthlyStats_Summary %>%
  mutate(month = fct_reorder(month, hit_ratio, .desc = TRUE))

# Plot
ggplot(monthlyStats_Summary, aes(x = month, y = hit_ratio, fill = month)) + 
  geom_col(position = "dodge") +
  labs(
    title = "Monthly Draft Hit Ratios by Dataset",
    x = "Month",
    y = "Hit Ratio"
  ) +
  theme(legend.position = "none") +
  theme_minimal()
```

```{r message=FALSE, warning=FALSE, echo=FALSE, eval=TRUE}
#
# Calculates draft probability for a given function. 
#

ms_total_days <- monthlyStats_Summary %>% group_by(month) %>% summarise(total_days = sum(hit) + sum(miss))


draft_prob <- function(my_month) {
  p <- round((monthlyStats_Summary %>% 
                           filter(month == my_month) %>% 
                           pull(hit)) / 
                        (ms_total_days %>% 
                           filter(month == my_month) %>% 
                           pull(total_days)), 3) * 100 
  return(p)
}
# feb_draft_prob <- draft_prob("Feb")

```

* Since `Dec` has one of the *most* number of days, with ``r ms_total_days %>% filter(month == "Dec") %>% pull(total_days)`` days. The probability of being drafted for a `Dec` birth date is ``r draft_prob("Dec")``%.

* Since `Feb` has the *least* number of days, with ``r ms_total_days %>% filter(month == "Feb") %>% pull(total_days)`` days. The probability of being drafted for a `Feb` birth date is ``r draft_prob("Feb")``%.

Here's a breakdown of the probabilities for each month:

1. Jan - ``r draft_prob("Jan")``%

2. Feb - ``r draft_prob("Feb")``%

3. Mar - ``r draft_prob("Mar")``%

4. Apr - ``r draft_prob("Apr")``%

5. May - ``r draft_prob("May")``%

6. Jun - ``r draft_prob("Jun")``%

7. Jul - ``r draft_prob("Jul")``%

8. Aug - ``r draft_prob("Aug")``%

9. Sep - ``r draft_prob("Sep")``%

10. Oct - ``r draft_prob("Oct")``%

11. Nov - ``r draft_prob("Nov")``%

12. Dec - ``r draft_prob("Dec")``%


### The best type of month to have been born in is a small month.

We can split each of these months into 2 categories - `small months` and `large months` - to see which "type" of month would have been best to have been born. 

* A small month would be any month with 30 or less days. 

* A large month would be any month with exactly 31 days.

| Small Month | sm_prob | Large Month | lm_prob |
| :---------: | :-----: | :---------: | :-----: |
| Feb | `r draft_prob("Feb")`% | Jan | `r draft_prob("Jan")`% |
| Apr | `r draft_prob("Apr")`% | Mar | `r draft_prob("Mar")`% |
| Jun | `r draft_prob("Jun")`% | May | `r draft_prob("May")`% |
| Sep | `r draft_prob("Sep")`% | Jul | `r draft_prob("Jul")`% |
| Nov | `r draft_prob("Nov")`% | Aug | `r draft_prob("Aug")`% | 
|     |       | Oct | `r draft_prob("Oct")`% |
|     |       | Dec | `r draft_prob("Dec")`% |


```{r message=FALSE, warning=FALSE, echo=TRUE, eval=TRUE}
library(ggplot2)
library(tibble)

sm_prob <- round((draft_prob("Feb") + 
                   draft_prob("Apr") +
                   draft_prob("Jun") + 
                   draft_prob("Sep") + 
                   draft_prob("Nov")) / 5, 3)
lm_prob <- round((draft_prob("Jan") + 
           draft_prob("Mar") +
           draft_prob("May") + 
           draft_prob("Jul") + 
           draft_prob("Aug") + 
           draft_prob("Oct") + 
           draft_prob("Dec")) / 7, 3)

# Create a tibble to visualize results
month_size_probs <- tibble(
  Month_Size = c("Small Months", "Large Months"),
  Avg_Probability = c(sm_prob, lm_prob)
)

ggplot(month_size_probs, 
       aes(x = Month_Size, y = Avg_Probability, fill = Month_Size)) +
  geom_col(width = 0.6) +
  labs(
    title = "Average Draft Probability by Month Size",
    x = "Month Types",
    y = "Average Draft Probability"
  ) +
  theme_minimal()

```

Contrary to popular believe, the data shows us that `Small Months` are, in fact, slightly better to have been born in for the 1970-1973 draft lotteries, since they averaged ``r lm_prob-sm_prob``% lower draft rates than their counter-parts. 

In fact, `Feb` had the 2nd lowest draft rate, coming in at ``r draft_prob("Feb")``%. Even though it only has 28 days!

*Note that Feb 4th is a potential false positive (see above under "For each date, check if draft was conducted")*


### The best month is March.
```{r message=FALSE, warning=FALSE, echo=FALSE, eval=TRUE}
library(ggplot2)
library(forcats)

# Reorganize months based on hit-ratio column
monthlyStats_Summary <- monthlyStats_Summary %>%
  mutate(month = fct_reorder(month, hit_ratio, .desc = FALSE))

# Plot
ggplot(monthlyStats_Summary, aes(x = month, y = hit_ratio, fill = month)) + 
  geom_col(position = "dodge") +
  labs(
    title = "Monthly Draft Hit Ratios by Dataset",
    x = "Month",
    y = "Hit Ratio"
  ) +
  theme_minimal()
```

